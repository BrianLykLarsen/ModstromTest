@using Umbraco.Forms.Core
@using Umbraco.Forms.Mvc.Models
@using Umbraco.Forms.Mvc.BusinessLogic
@using Umbraco.Forms.MVC.Extensions
@using Umbraco.Web
@using ClientDependency.Core.Mvc;

@model Umbraco.Forms.Mvc.Models.FormViewModel
@{
	Html.EnableClientValidation(true);
	Html.EnableUnobtrusiveJavaScript(true);


	string formNameId = Model.FormName.Replace(" ", "");
	formNameId = formNameId.ToLower();
	formNameId = formNameId.Replace("æ", "ae");
	formNameId = formNameId.Replace("ø", "oe");
	formNameId = formNameId.Replace("å", "aa");
	formNameId = "contour_form_" + formNameId;


	if (Model.SubmitHandled)
	{
		if (Model.RenderMode == "full" || Model.RenderMode == "form")
		{
			<p id="@formNameId" class="contourMessageOnSubmit">@Html.Raw(Model.MessageOnSubmit)</p>
		}
	}
	else
	{
		if (Model.RenderMode == "full" || Model.RenderMode == "form")
		{

			<div id="@formNameId" class="@Model.CssClass">

				@using (Html.BeginUmbracoForm<Umbraco.Forms.Web.Controllers.UmbracoFormsController>("HandleForm"))
				{
					<input type="hidden" name="FormId" value="@Model.FormId" />
					@Html.HiddenFor(x => Model.FormName)
					@Html.HiddenFor(x => Model.RecordId)
					@Html.HiddenFor(x => Model.PreviousClicked)

					<input type="hidden" name="FormStep" value="@Model.FormStep" />

					if (string.IsNullOrEmpty(Model.CurrentPage.Caption) == false)
					{
						<h4 class="contourPageName">@Html.Raw(Model.CurrentPage.Caption)</h4>
					}

					if (Model.ShowValidationSummary)
					{
						@Html.ValidationSummary(false)
					}

					foreach (FieldsetViewModel fs in Model.CurrentPage.Fieldsets)
					{
						<div id="@fs.Id">
							<div class="row-fluid">
								@foreach (var c in fs.Containers)
								{

									<div class="@("span" + c.Width) @("col-md-" + c.Width)">
										@foreach (FieldViewModel f in c.Fields)
										{
											bool hidden = f.HasCondition && f.ConditionActionType == FieldConditionActionType.Show;

											<div class="@f.CssClass input-container" @{ if (hidden) { <text> style="display: none" </text>     } }>


												@if (!string.IsNullOrEmpty(f.ToolTip))
												{
													<span class="help-block">@f.ToolTip</span>
												}
												@if (Model.ShowFieldValidaton)
												{
													<div class="error-message">@Html.ValidationMessage(f.Id)</div>
												}
												<label>@f.Caption</label>
												@Html.Partial(FieldViewResolver.GetFieldView(Model.FormId.ToString(), f.FieldTypeName, f.Caption), f)
											</div>
										}
									</div>
								}
							</div>

						</div>
					}

					<div style="display: none">
						<input type="text" name="@Model.FormId.ToString().Replace("-", "")" />
					</div>


					<div class="contourNavigation row-fluid">
						<div class="col-md-12">
							@if (Model.IsMultiPage)
							{
								if (!Model.IsFirstPage)
								{
									<input class="btn prev cancel" type="submit" value="@Model.PreviousCaption" name="__prev" />
								}
								if (!Model.IsLastPage)
								{
									<input type="submit" class="btn next" value="@Model.NextCaption" name="next" />
								}
								if (Model.IsLastPage)
								{
									<input type="submit" class="btn primary" value="@Model.SubmitCaption" name="submit" />
								}
							}
							else
							{
								<div class="button-holder">
									<button type="submit" class="btn btn-orange btn-icon btn-icon-send" name="submit">@Model.SubmitCaption</button>
								</div>
							}
						</div>
					</div>


				}
			</div>

		}

		if (Model.RenderMode == "full" || Model.RenderMode == "script")
		{
			@Html.Partial(FormViewResolver.GetScriptView(Model.FormId), Model)

			foreach (var script in Model.CurrentPage.JavascriptFiles)
			{
				if (Model.UseClientDependency)
				{
					Html.RequiresJs(script.Value);
				}
				else
				{
					<script type="text/javascript" src="@Url.Content(script.Value)"></script>
				}
			}

			if (Model.CurrentPage.JavascriptCommands.Count > 0)
			{

				<script type="text/javascript">
					@foreach (var cmd in Model.CurrentPage.JavascriptCommands)
                {
                    <text>@Html.Raw(cmd)</text>
                }

				</script>
			}

			foreach (var css in Model.CurrentPage.CssFiles)
			{
				if (Model.UseClientDependency)
				{
					Html.RequiresCss(css.Value);
				}
				else
				{
					<link rel="stylesheet" href="@Url.Content(css.Value)" />
				}
			}

		}
	}
}